/**
 * @fileoverview PostgreSQL Role Generator
 * 
 * Generates database roles based on PostgREST configuration with proper
 * permissions for RLS policies and API access.
 * 
 * @author PGRestify Team
 * @since 2.0.0
 */

import { getPostgRESTConfig } from '../utils/postgrest-config.js';
import { logger } from '../utils/logger.js';
import chalk from 'chalk';

export interface RoleConfig {
  anonRole: string;
  authenticatedRole: string;
  adminRole: string;
  schema: string;
}

export class RoleGenerator {
  constructor(private projectPath: string) {}

  /**
   * Generate role setup SQL based on PostgREST configuration
   */
  async generateRoleSetup(): Promise<string> {
    try {
      const postgrestConfig = await getPostgRESTConfig();
      
      const roleConfig: RoleConfig = {
        anonRole: postgrestConfig.dbAnonRole || 'web_anon',
        authenticatedRole: postgrestConfig.dbAuthenticatedRole || 'authenticated',
        adminRole: 'web_admin', // Standard admin role
        schema: postgrestConfig.dbSchemas || 'api'
      };

      return this.generateRoleSQL(roleConfig);
    } catch (error) {
      logger.warn(`Could not read PostgREST config, using defaults: ${error.message}`);
      
      // Fallback to default configuration
      const defaultConfig: RoleConfig = {
        anonRole: 'web_anon',
        authenticatedRole: 'authenticated',
        adminRole: 'web_admin',
        schema: 'api'
      };
      
      return this.generateRoleSQL(defaultConfig);
    }
  }

  /**
   * Generate SQL for creating database roles with proper permissions
   */
  private generateRoleSQL(config: RoleConfig): string {
    const { anonRole, authenticatedRole, adminRole, schema } = config;
    
    // Handle multiple schemas (db-schemas can be "public,api,auth")
    const schemas = schema.split(',').map(s => s.trim()).filter(s => s);
    
    let sql = `-- Database Roles Setup
-- Generated by PGRestify CLI
-- This script creates the roles referenced in PostgREST configuration and RLS policies

-- Create roles if they don't exist
DO $$ BEGIN
    CREATE ROLE ${anonRole} NOLOGIN;
    EXCEPTION WHEN duplicate_object THEN NULL;
END $$;

DO $$ BEGIN
    CREATE ROLE ${authenticatedRole} NOLOGIN;
    EXCEPTION WHEN duplicate_object THEN NULL;
END $$;

DO $$ BEGIN
    CREATE ROLE ${adminRole} NOLOGIN;
    EXCEPTION WHEN duplicate_object THEN NULL;
END $$;

-- Grant basic permissions to anonymous role
GRANT USAGE ON SCHEMA ${schema} TO ${anonRole};
GRANT SELECT ON ALL TABLES IN SCHEMA ${schema} TO ${anonRole};
GRANT SELECT ON ALL SEQUENCES IN SCHEMA ${schema} TO ${anonRole};

-- Grant permissions to authenticated role
GRANT USAGE ON SCHEMA ${schema} TO ${authenticatedRole};
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA ${schema} TO ${authenticatedRole};
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA ${schema} TO ${authenticatedRole};

-- Grant full permissions to admin role
GRANT ALL ON SCHEMA ${schema} TO ${adminRole};
GRANT ALL ON ALL TABLES IN SCHEMA ${schema} TO ${adminRole};
GRANT ALL ON ALL SEQUENCES IN SCHEMA ${schema} TO ${adminRole};

-- Set default privileges for future tables
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT SELECT ON TABLES TO ${anonRole};
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO ${authenticatedRole};
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT ALL ON TABLES TO ${adminRole};

-- Set default privileges for future sequences
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT SELECT ON SEQUENCES TO ${anonRole};
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT USAGE, SELECT ON SEQUENCES TO ${authenticatedRole};
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT ALL ON SEQUENCES TO ${adminRole};

-- Grant execute permissions on functions
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA ${schema} TO ${anonRole};
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA ${schema} TO ${authenticatedRole};
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA ${schema} TO ${adminRole};

-- Set default privileges for future functions
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT EXECUTE ON FUNCTIONS TO ${anonRole};
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT EXECUTE ON FUNCTIONS TO ${authenticatedRole};
ALTER DEFAULT PRIVILEGES IN SCHEMA ${schema} GRANT EXECUTE ON FUNCTIONS TO ${adminRole};

-- Additional schema permissions for completeness
${schema !== 'public' ? `
-- If using a custom schema, grant usage on public schema as well for system functions
GRANT USAGE ON SCHEMA public TO ${anonRole};
GRANT USAGE ON SCHEMA public TO ${authenticatedRole};
GRANT USAGE ON SCHEMA public TO ${adminRole};
` : ''}

-- Role configuration summary:
-- ${anonRole}: Anonymous users (SELECT only)
-- ${authenticatedRole}: Authenticated users (CRUD operations)
-- ${adminRole}: Administrative users (Full access)
-- Schema: ${schema}`;

    return sql;
  }

  /**
   * Get role configuration from PostgREST config
   */
  async getRoleConfig(): Promise<RoleConfig> {
    try {
      const postgrestConfig = await getPostgRESTConfig();
      
      return {
        anonRole: postgrestConfig.dbAnonRole || 'web_anon',
        authenticatedRole: postgrestConfig.dbAuthenticatedRole || 'authenticated',
        adminRole: 'web_admin',
        schema: postgrestConfig.dbSchemas || 'api'
      };
    } catch (error) {
      logger.warn('Using default role configuration');
      return {
        anonRole: 'web_anon',
        authenticatedRole: 'authenticated',
        adminRole: 'web_admin',
        schema: 'api'
      };
    }
  }

  /**
   * Display role setup information
   */
  displayRoleInfo(config: RoleConfig): void {
    logger.newLine();
    logger.info(chalk.cyan('ðŸ”‘ Database Roles Configuration:'));
    logger.list([
      `Anonymous Role: ${chalk.green(config.anonRole)} (read-only access)`,
      `Authenticated Role: ${chalk.green(config.authenticatedRole)} (CRUD operations)`,
      `Admin Role: ${chalk.green(config.adminRole)} (full access)`,
      `Target Schema: ${chalk.green(config.schema)}`
    ]);
    
    logger.newLine();
    logger.info(chalk.yellow('ðŸ’¡ Role Setup Tips:'));
    logger.list([
      'Roles are created based on your PostgREST configuration',
      'Anonymous users get SELECT permissions only',
      'Authenticated users can perform CRUD operations',
      'Admin role has full database access',
      'Future tables automatically inherit these permissions'
    ]);
  }
}